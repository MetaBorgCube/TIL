module analysis/typestate

imports
  strategolib
  signatures/-
  optimisation/opt-lib
  rewrite/desugar

signature
  sorts Property TypeState
  constructors
    TypeState : Property -> TypeState
    UnInit    : Property
    Init      : Property
    Dunno     : Property

strategies
  typestate-program =
    Program(typestate-stats)

  typestate =
    typestate-stat
    <+ all(typestate); try(typestate-exp)

  typestate-stat =
    Block(typestate-stats)

  typestate-stats =
    {| TypestateOf : map(typestate) |}

  typestate-stat =
    (?Declaration(x) <+ ?DeclarationTyped(x, t))
    ; rules( TypestateOf+x : x -> UnInit() )

  typestate-stat =
    Assign(?x, typestate => e)
    ; where( <typestate-of> e => ts )
    ; rules( TypestateOf.x : x -> Init() )

  typestate-stat =
    IfElse(typestate, id, id)
    ; merge-TypestateOf(IfElse(id, typestate-stats, id), IfElse(id,id,typestate-stats))

  typestate-stat =
    ?While(_, _)
    ; merge-TypestateOf(id, While(typestate, typestate-stats))

  typestate-stat =
    For(?x, typestate, typestate, id)
    ; rules( TypestateOf.x : x -> Init() )
    ; merge-TypestateOf(id, For(id,id,id,typestate-stats))

rules
  typestate-of :
    e{t*} -> ts
    where <fetch-elem(?TypeState(<id>))> t* => ts

rules
  typestate-exp :
    Var(x){t*} -> Var(x){TypeState(ts), t*}
    where <TypestateOf> x => ts

  typestate-exp :
    Int(i){t*} -> Int(i){TypeState(Init()), t*}

  typestate-exp :
    String(x){t*} -> String(x){TypeState(Init()), t*}

  typestate-exp = BinOpToFunCall; typestate-exp; FunCallToBinOp

  typestate-exp :
    FunCall(f, e*){t*} -> FunCall(f, e*){TypeState(ts),t*}
    where <foldr(!Init(), typestate-combine, typestate-of)> e* => ts

  typestate-combine : (UnInit(), UnInit()) -> UnInit()
  typestate-combine : (Init(),   Init())   -> Init()
  typestate-combine : (Init(),   UnInit()) -> Dunno()
  typestate-combine : (UnInit(), Init())   -> Dunno()
  typestate-combine : (Dunno(),  _)        -> Dunno()
  typestate-combine : (_,        Dunno())  -> Dunno()

strategies
  merge-TypestateOf(s1, s2) =
    dr-symbolic-merge(typestate-combine, TypestateOf, aux-TypestateOf(|(),()), redef-TypestateOf, s1, s2 | "TypestateOf")

  redef-TypestateOf =
    ?(x, o); rules( TypestateOf.x : x -> o )

strategies
  dr-print-rule-set(|m, r) =
    debug(!m)
    ; dr-print-rule-set(|r)

  // generic strategies

  dr-symbolic-merge(merge, call, aux, redef, s1, s2 | R) =
    where(
      dr-get-rule-set(|R) => rs2
      ; dr-start-change-set(|R)
    )
    ; s1
    ; where(
        dr-get-rule-set(|R) => rs1
        ; <dr-set-rule-set(|R)> rs2
        ; dr-start-change-set(|R)
      )
    ; s2
    ; dr-symbolic-merge-rulesets(merge, call, aux, redef | rs1, R)


  dr-symbolic-merge-rulesets(merge, call, aux, redef | rs1, R) =
    where(
      !rs1 => [ChangeSet(_,_,<id>)|_]
      ; hashtable-keys
      ; map(Snd; !(<id>, <merge>(<dr-symbolic-lookup(aux|rs1)>, <call>)); redef)
      ; dr-get-rule-set(|R) => rs2 => [ChangeSet(_,_,<id>)|_]
      ; hashtable-keys
      ; map(Snd; !(<id>, <merge>(<dr-symbolic-lookup(aux|rs1)>, <call>)); redef)
      ; dr-commit-change-set(|R)
    )

    // Note: can scope label be derived from the label in the changeset (ht)?

  dr-symbolic-lookup(aux|rs) =
    ?x
    ; <dr-lookup-rule(|x)> rs
    ; ?[<aux>|_]
