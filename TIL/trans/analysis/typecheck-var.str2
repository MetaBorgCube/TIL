module analysis/typecheck-var

imports
  strategolib
  signatures/-
  analysis/typecheck-exp

strategies
  typecheck-declaration =
    ?Declaration(x)
    ; rules( TypeOf+x : x -> TypeName("int") )

  typecheck-declaration =
    ?DeclarationTyped(x, t)
    ; rules( TypeOf+x : x -> t )

  TypecheckVar :
    Var(x) -> Var(x){t}
    where <TypeOf> x => t

  TypecheckAssign :
    Assign(x, e) -> Assign(x, e){TypeName("void")}
    where <typeof> e => t
        ; <TypeOf> x => t

strategies // expressions with variables and calls

  typecheck-exp =
    typecheck-exp(TypecheckVar <+ typecheck-funcall)

strategies // built-in functions

  typecheck-funcall :
    FunCall("read", []) -> FunCall("read", []){TypeName("string")}

  typecheck-funcall :
    FunCall("readint", []) -> FunCall("readint", []){TypeName("int")}

  typecheck-funcall :
    FunCall("string2int", [e]) -> FunCall("string2int", [e]){TypeName("int")}
    where <typeof> e => TypeName("string")

  typecheck-funcall :
    FunCall("int2string", [e]) -> FunCall("int2string", [e]){TypeName("string")}
    where <typeof> e => TypeName("int")

  typecheck-funcall :
    FunCall("bool2string", [e]) -> FunCall("bool2string", [e]){TypeName("string")}
    where <typeof> e => TypeName("bool")

strategies // built-in procedures

  typecheck-proccall :
    ProcCall("write", [e]) -> ProcCall("write", [e]){TypeName("void")}
    where <typeof> e => TypeName("string")

  typecheck-proccall :
    ProcCall("writeint", [e]) -> ProcCall("writeint", [e]){TypeName("void")}
    where <typeof> e => TypeName("int")





