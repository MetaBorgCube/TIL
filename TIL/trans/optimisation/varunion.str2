module optimisation/varunion

imports
  strategolib
  signatures/-
  optimisation/opt-lib
  rewrite/eval

strategies
  varunion :: ? -> ?
  varunion =
       apply-VarUnion
    <+ varunion-rule
    <+ all(varunion); try(EvalExp)

  apply-VarUnion :: ? -> ?
  apply-VarUnion :
    Var(x) -> x'
    where <bagof-VarUnion>Var(x) => [v|vs]
        ; (<?[]>vs
           < !v
           + !FunCall(<conc-strings>("select", x), [v|vs])) => x'

  varunion-rule :: ? -> ?
  varunion-rule =
    Block({| VarUnion : map(varunion) |})

  varunion-rule =
    (?Declaration(x) <+ ?DeclarationTyped(x, t))
    ; rules( VarUnion+x :- Var(x) )

  varunion-rule =
    Assign(?x, varunion => e)
    ; if <is-value> e then
        rules( VarUnion.x : Var(x) -> e )
      else
        rules( VarUnion.x :- Var(x) )
      end

  varunion-rule =
    IfThen(varunion, id)
    ; (EvalIf; varunion
       <+ IfThen(id, {| VarUnion: map(varunion) |}) \VarUnion/ id)

  varunion-rule =
    IfElse(varunion, id, id)
    ; (EvalIf; varunion
       <+ IfElse(id, {| VarUnion: map(varunion) |}, id) \VarUnion/
          IfElse(id, id, {| VarUnion: map(varunion) |}))

  varunion-rule =
    ?While(_, _)
    ; (\VarUnion/* While(varunion, {| VarUnion: map(varunion) |}))

  varunion-rule =
    Labeled(?label,
      dr-fix-and-union(While(varunion, {| VarUnion: map(varunion) |}) | ["VarUnion"], label)
    )

  varunion-rule =
    For(?x, varunion, varunion, id)
    ; rules( VarUnion.x :- Var(x) )
    ; (\VarUnion/* For(id, id, id, {| VarUnion: map(varunion) |}))

  varunion-rule =
    Labeled(?label,
      dr-label-union(varunion | ["VarUnion"], label)
    )

  varunion-rule =
    ?Break(None())
    ; break-VarUnion

  varunion-rule =
    ?Break(Some(label))
    ; break-to-label-VarUnion(|label)

  varunion-rule =
    ?Continue(None())
    ; continue-VarUnion

  varunion-rule =
    ?Continue(Some(label))
    ; continue-to-label-VarUnion(|label)

  varunion-rule =
    ?Try(tblock, cclauses)
    ; dr-init-exception-block(fail | <get-catch-tags>cclauses, ["VarUnion"])
    ; <varunion>tblock => tblock'
    ; <map(dr-complete-catch-union(varunion | ["VarUnion"]))>cclauses => cclauses'
    ; dr-complete-exception-block-union(|["VarUnion"])
    ; !Try(tblock', cclauses')

  varunion-rule =
    ?Try(tblock, cclauses, fblock)
    ; dr-init-exception-block(id | <get-catch-tags>cclauses, ["VarUnion"])
    ; <varunion>tblock => tblock'
    ; <map(dr-complete-catch-union(varunion | ["VarUnion"]))>cclauses => cclauses'
    ; <dr-complete-finally-union(varunion | ["VarUnion"])>fblock => fblock'
    ; dr-complete-exception-block-union(|["VarUnion"])
    ; !Try(tblock', cclauses', fblock')

  get-catch-tags =
    map(?Catch(_, <id>, _))

  varunion-rule =
    ?Throw(TypeName(t))
    ; throw-VarUnion(eq | t)
