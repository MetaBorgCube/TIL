module rewrite/desugar

imports
  strategolib
  signatures/-

rules
  simplify-Stat :: ? -> ?
  simplify-Stat :
    For(x, e1, e2, st*) ->
      Block([
        DeclarationTyped(y, TypeName("int")), 
        Assign(x, e1), 
        Assign(y, e2), 
        While(Leq(Var(x), Var(y)), 
          <conc>(st*, [Assign(x, Add(Var(x), Int("1")))])
        )
      ])
    where <local-newname> "for" => y

  simplify-Stat :
    IfThen(e, st*) -> IfElse(e, st*, [])

  simplify-Stat :
    Declaration(x) -> DeclarationTyped(x, TypeName("int"))

  simplify-Stat :
    ProcCall("writeint", [e]) -> 
    ProcCall("write", [FunCall("int2string", [e])])

  simplify-Stat :
    FunCall("readint", []) -> 
    FunCall("string2int", [FunCall("read", [])])

  BinOpToFunCall :: ? -> ?
  BinOpToFunCall :
    op#([e1,e2]){t*} -> FunCall(op, [e1,e2]){t*}
    where <is-bin-op> op

  FunCallToBinOp :: ? -> ?
  FunCallToBinOp :
    FunCall(op, [e1,e2]){t*} -> op#([e1,e2]){t*}
    where <is-bin-op> op

  is-bin-op :: ? -> ?
  is-bin-op =
     ?"Add"
  <+ ?"Mul"
  <+ ?"Subt"
  <+ ?"Div"
  <+ ?"Mod"
  <+ ?"Geq"
  <+ ?"Leq"
  <+ ?"Gt"
  <+ ?"Lt"
  <+ ?"Equ"
  <+ ?"Neq"
  <+ ?"Or"
  <+ ?"And"