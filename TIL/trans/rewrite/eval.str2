module rewrite/eval

imports
  strategolib
  signatures/-

rules
  EvalExp :: ? -> ?
  EvalExp :
    Add(Int(i), Int(j)) -> Int(<addS>(i,j))

  EvalExp :
    Add(String(i), String(j)) -> String(<conc-strings>(i,j))

  EvalExp :
    Sub(Int(i), Int(j)) -> Int(<subtS>(i,j))

  EvalExp :
    Mul(Int(i), Int(j)) -> Int(<mulS>(i,j))

  EvalExp :
    Div(Int(i), Int(j)) -> Int(<divS>(i,j))

  EvalExp :
    Mod(Int(i), Int(j)) -> Int(<modS>(i,j))

  EvalExp :
    Lt(Int(i), Int(j)) -> <compare(ltS)>(i,j)

  EvalExp :
    Gt(Int(i), Int(j)) -> <compare(gtS)>(i,j)

  EvalExp :
    Leq(Int(i), Int(j)) -> <compare(leqS)>(i,j)

  EvalExp :
    Geq(Int(i), Int(j)) -> <compare(geqS)>(i,j)

  EvalExp :
    Equ(Int(i), Int(j)) -> <compare(eq)>(i,j)

  EvalExp :
    Neq(Int(i), Int(j)) -> <compare(not(eq))>(i,j)

  compare(? -> ?) :: ? -> ?
  compare(s) =
    if s then !True() else !False() end

  EvalExp :
    Or(True(), e) -> True()

  EvalExp :
    Or(False(), e) -> e

  EvalExp :
    And(True(), e) -> e

  EvalExp :
    And(False(), e) -> False()

  simplify-Exp :: ? -> ?
  simplify-Exp :
    Add(e, Int("0")) -> e

  simplify-Exp :
    Add(Int("0"), e) -> e

  simplify-Exp :
    Mul(e, Int("1")) -> e

  simplify-Exp :
    Mul(Int("1"), e) -> e

  EvalExp :
    FunCall("string2int", [String(x)]) -> Int(x')
    where x' := <un-double-quote> x
        ; <string-to-int> x'

  EvalExp :
    FunCall("int2string", [Int(i)]) -> String(<double-quote> i)

  EvalIf :: ? -> ?
  EvalIf :
    IfElse(False(), st1*, st2*) -> Block(st2*)

  EvalIf :
    IfElse(True(), st1*, st2*) -> Block(st1*)

  EvalWhile :: ? -> ?
  EvalWhile :
     While(False(), st*) -> Block([])
