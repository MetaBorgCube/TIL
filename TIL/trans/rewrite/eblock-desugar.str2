module rewrite/eblock-desugar
imports
  strategolib
  signatures/-
  rewrite/desugar
strategies

  til-eblock-desugar =
    bottomup(try(FunCallToEBlock))
    ; innermost(
        EBlockEBlock
        <+ NoStatements
        <+ MovePostStatementsInFront
        <+ HoistEBlock
      )
    ; bottomup(try(flatten-block))

rules

  FunCallToEBlock :
    FunCall(f, e*) ->
    EBlock([Declaration(x), Assign(x, FunCall(f, e*))], Var(x), [])
    where <local-newname> "fcteb" => x

  EBlockEBlock :
    EBlock(st1*, EBlock(st2*, e, st3*), st4*) ->
    EBlock([st1*, st2*], e, [st3*, st4*])

  NoStatements :
    EBlock([], e, []) -> e

  MovePostStatementsInFront :
    EBlock(st1*, e, st2*@[_|_]) ->
    EBlock([Declaration(x), st1*, Assign(x, e), st2*], Var(x), [])
    where <local-newname> "mpsif" => x

  HoistEBlock :
    FunCall(f, e1*) -> EBlock(st1*, FunCall(f, e2*), [])
    where <collect-eblocks> e1* => (st1*, e2*)

  HoistEBlock :
    op#([e1, e2]) -> EBlock(st1*, op#([e1', e2']), [])
    where <is-bin-op> op
        ; <collect-eblocks> [e1, e2] => (st1*, [e1', e2'])

  HoistEBlock :
    Assign(x, EBlock(st1*, e, st2*)) -> Block([st1*, st2*, Assign(x, e)])

  HoistEBlock :
    ProcCall("write", [EBlock(st1*, e, st2*)]) -> Block([st1*, ProcCall("write", [e]), st2*])

  HoistEBlock :
    ProcCall(f, e1*) -> Block([st*, ProcCall(f, e2*)])
    where <collect-eblocks> e1* => (st*, e2*)

  HoistEBlock :
    IfElse(EBlock(st1*, e, st2*), st3*, st4*) ->
    Block([st1*, IfElse(e, [st2*,st3*], [st2*,st4*])])

  HoistEBlock :
    IfThen(EBlock(st1*, e, st2*), st3*) ->
    Block([st1*, IfElse(e, [st2*,st3*], st2*)])

  HoistEBlock :
    While(EBlock(st1*, e, st2*), st3*) ->
    Block([st1*, While(e, [st2*,st3*,st1*])])

  HoistEBlock :
    For(x, e1, e2, st1*) ->
    Block([st2*, For(x, e1', e2', st1*)])
    where <collect-eblocks> [e1, e2] => (st2*, [e1', e2'])

  collect-eblocks =
    fetch(?EBlock(_,_,_))
    ; map({where(<local-newname> "ce" => x); !([Declaration(x), Assign(x, <id>)], Var(x))})
    ; unzip
    ; (concat, id)


  flatten-block =
    Block(
      foldr(![], \ (Block(st2*), st3*) -> [st2*, st3*] \
                     <+ \ (st, st*) -> [st | st*] \ )
      ; partition(?Declaration(_))
      ; conc
    )