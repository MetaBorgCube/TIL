module interpreter/eval-var

imports
  strategolib
  signatures/-
  interpreter/eval-exp

strategies
  eval-stat-rule(eval-read) = 
    (?Declaration(x) <+ ?DeclarationTyped(x, t))
    ; rules( EvalVar+x :- Var(x) )

  eval-stat-rule(eval-read) = 
    Assign(?x, eval-exp(eval-read) => val)
    ; rules(EvalVar.x : Var(x) -> val)

  EvalRead :
    FunCall("read", []) -> String(x)
    where stdin-stream; read-text-line => x

  eval-stat-rule(eval-read) = 
    ?ProcCall("write", [<eval-exp(eval-read)>])
    ; where( ?String(<try(un-double-quote); try(unescape)>)
           ; <fprint>(<stdout-stream>, [<id>]))

  eval-stat-rule(eval-read) = 
    ?ProcCall("write", [<eval-exp(eval-read)>])
    ; where( ?Int(<id>)
           ; <fprint>(<stdout-stream>, [<id>]))

  VarUndefined =
    ?Var(<id>)
    ; fatal-err(|<concat-strings>["variable ", <id>, " used before being defined"])
