module Expressions

imports
  Literals

context-free sorts
  Exp

context-free syntax

  Exp.True   = [true]
  Exp.False  = [false]
  Exp.Var    = ID
  Exp.Int    = INT
  Exp.String = STRING
  Exp.Mul    = [[Exp] * [Exp]]   {assoc}
  Exp.Div    = [[Exp] / [Exp]]   {assoc}
  Exp.Mod    = [[Exp] % [Exp]]   {non-assoc}
  Exp.Add    = [[Exp] + [Exp]]   {assoc}
  Exp.Sub    = [[Exp] - [Exp]]   {left}
  Exp.Lt     = [[Exp] < [Exp]]  {non-assoc}
  Exp.Gt     = [[Exp] > [Exp]]  {non-assoc}
  Exp.Leq    = [[Exp] <= [Exp]] {non-assoc}
  Exp.Geq    = [[Exp] >= [Exp]] {non-assoc}
  Exp.Equ    = [[Exp] = [Exp]]   {non-assoc}
  Exp.Neq    = [[Exp] != [Exp]]  {non-assoc}
  Exp.And    = [[Exp] & [Exp]]   {assoc}
  Exp.Or     = [[Exp] | [Exp]]   {assoc}
  Exp        = [([Exp])]       {bracket}

context-free priorities

  { left:
    Exp.Mul
    Exp.Div
  } >
  { left:
    Exp.Add
    Exp.Sub
  } >
  { non-assoc:
    Exp.Lt
    Exp.Gt
    Exp.Leq
    Exp.Geq
    Exp.Equ
    Exp.Neq
  } >
    Exp.And
    >
    Exp.Or
